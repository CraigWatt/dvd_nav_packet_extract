name: Build, Test, and Package dvd_nav_packet_extract

on:
  push:
    tags:
      - "v*.*.*"
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: 👷 Build and Test dvd_nav_packet_extract
    runs-on: macos-latest

    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3.3.0

      # Ensure Xcode command line tools are installed
      - name: Install Xcode Command Line Tools
        run: |
          xcode-select --install || true
          sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer

      # Set up dependencies on macOS
      - name: Set up dependencies on macOS
        run: |
          brew update
          brew install autoconf automake libtool pkg-config git llvm

      # Build dvdnavtex application
      - name: 🏗️ Build dvdnavtex
        run: make build

      # Debug the build output to verify the binary location
      - name: Debug List files in project directory
        run: ls -la

      - name: Debug List files in local_libs directory
        run: ls -la local_libs

      # Check if the binary was created in multiple potential locations
      - name: Verify binary creation
        run: |
          if [ -f ./dvdnavtex ]; then
            echo "dvdnavtex binary found in project root!"
          elif [ -f ./local_libs/dvdnavtex ]; then
            echo "dvdnavtex binary found in local_libs directory!"
          else
            echo "dvdnavtex binary not found!"
            exit 1
          fi

      # Cache the build output
      - name: 💭 Cache application
        uses: actions/cache@v3.2.2
        id: dvdnavtex-build
        with:
          path: |
            ./dvdnavtex
          key: ${{ github.sha }}

  apple-pkg:
    name: 👷 Setup macOS .pkg
    runs-on: macos-latest
    needs: [build]
    timeout-minutes: 5
    
    steps:
    - name: ⬇️ Checkout repo
      uses: actions/checkout@v3.3.0

    # Ensure Homebrew is installed
    - name: ❓ Check for Homebrew
      run: brew -v

    # Install required packages
    - name: 🔨 Install xmlstarlet and python (if needed)
      run: |
        brew install xmlstarlet python

    # Fetch application cache (verify if binary is retrieved)
    - name: 🤌💭 Fetch application cache
      uses: actions/cache@v3.2.2
      id: dvdnavtex-build
      with:
        path: ./dvdnavtex
        key: ${{ github.sha }}

    # Check if cache fetched the dvdnavtex binary correctly
    - name: Verify binary fetched from cache
      run: |
        if [ ! -f ./dvdnavtex ]; then
          echo "dvdnavtex binary not found after cache retrieval! Exiting..."
          exit 1
        else
          echo "dvdnavtex binary found after cache retrieval!"
        fi

    # Update build-info.plist from tag
    - name: ✍️ Update version string in build-info.plist from tag
      run: |
        xmlstarlet ed --inplace -u "/plist/dict/string[@id=9]" -v $GITHUB_REF_NAME munki-pkg-workspace/build-info.plist

    # Copy binary to payload for packaging
    - name: 🫳 Position application to payload
      run: |
        mkdir -p munki-pkg-workspace/payload/usr/local/bin
        cp dvdnavtex munki-pkg-workspace/payload/usr/local/bin/

    # Run munkipkg for packaging
    - name: Run munkipkg 🧙‍♂️📦
      uses: joncrain/munkipkg-action@5a6c2008ded522b67396a78c06983e614cbe22ac
      with:
        pkg_subdir: "munki-pkg-workspace"
    
    # Cache the .pkg output
    - name: 💭 Cache .pkg
      uses: actions/cache@v3.2.2
      id: macos-pkg
      with:
        path: |
          ./munki-pkg-workspace/build/*
        key: ${{ github.sha }}

  release:
    name: 📦 Release
    needs: [apple-pkg]
    runs-on: macos-latest

    steps:
    - name: ⬇️ Checkout repo
      uses: actions/checkout@v3.3.0

    # Fetch macOS .pkg cache
    - name: 🤌💭 Fetch macOS .pkg Cache
      uses: actions/cache@v3.2.2
      id: macos-pkg
      with:
        path: |
          ./munki-pkg-workspace/build/*
        key: ${{ github.sha }}
  
    # Release the static build and macOS package
    - name: 👷📦 Release static builds & macOS pkg
      uses: softprops/action-gh-release@v0.1.15
      with:
        generate_release_notes: true
        files: |
          ./munki-pkg-workspace/build/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
