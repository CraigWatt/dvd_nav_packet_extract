name: Build, Test, and Package dvd_nav_packet_extract

#POST V1.*.* SWITCH BACK ON
# on:
#   push:
#     tags:
#       - "v*.*.*"
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

on:
  push:
    branches:
      - "**"   # Triggers on all branches
  pull_request:
    branches:
      - "**"   # Triggers on all pull requests

permissions:
  contents: write

jobs:
  build:
    name: üë∑ Build and Test dvd_nav_packet_extract
    runs-on: macos-latest

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      # Install Homebrew and update
      - name: Install Homebrew and update
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || true
          brew update

      # Install ffmpeg and dvdauthor
      - name: Install ffmpeg and dvdauthor
        run: |
          brew install ffmpeg dvdauthor

      # Ensure Xcode command line tools are installed
      - name: Install Xcode Command Line Tools
        run: |
          xcode-select --install || true
          sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer

      # Clone bbb_dvd_creator.sh repository and run the script
      - name: Clone bbb_dvd_creator.sh repository
        run: |
          git clone https://github.com/CraigWatt/bbb_dvd_creator
          cd bbb_dvd_creator
          ./bbb_dvd_creator.sh -q bbb_sunflower_1080p_30fps_normal_transcoded.mp4

      - name: Run bbb_dvd_creator.sh script
        working-directory: ./bbb_dvd_creator.sh
        run: ./bbb_dvd_creator.sh -q bbb_sunflower_1080p_30fps_normal_transcoded.mp4

      # Set up dependencies on macOS
      - name: Set up dependencies on macOS
        run: |
          brew update
          brew install autoconf automake libtool pkg-config git

      # Build libdvdcss
      - name: Build libdvdcss
        run: |
          if [ ! -d local_libs/libdvdcss ]; then
            git clone https://code.videolan.org/videolan/libdvdcss.git local_libs/libdvdcss
          fi
          cd local_libs/libdvdcss
          autoreconf -i
          ./configure --prefix=$(pwd) --disable-shared --enable-static
          make
          make install
          cd ../../

      # Build libdvdread
      - name: Build libdvdread
        run: |
          if [ ! -d local_libs/libdvdread ]; then
            git clone https://code.videolan.org/videolan/libdvdread.git local_libs/libdvdread
          fi
          cd local_libs/libdvdread
          autoreconf -i
          ./configure --prefix=$(pwd) \
            --with-libdvdcss-includes=$(pwd)/../libdvdcss/include \
            --with-libdvdcss-lib=$(pwd)/../libdvdcss/lib \
            --disable-shared --enable-static
          make
          make install
          cd ../../

      # Build libdvdnav
      - name: Build libdvdnav
        run: |
          export PKG_CONFIG_PATH=$(pwd)/local_libs/libdvdread/lib/pkgconfig
          export DYLD_LIBRARY_PATH=$(pwd)/local_libs/libdvdread/lib

          if [ ! -d local_libs/libdvdnav ]; then
            git clone https://code.videolan.org/videolan/libdvdnav.git local_libs/libdvdnav
          fi

          cd local_libs/libdvdnav

          # Replace obsolete macro AC_PROG_CC_C99 with AC_PROG_CC
          sed -i '' 's/AC_PROG_CC_C99/AC_PROG_CC/g' configure.ac

          # Run autoupdate to update obsolete macros
          autoupdate || true

          # Regenerate configure script
          autoreconf -i

          # Configure and build
          ./configure --prefix=$(pwd) --disable-shared --enable-static
          make
          make install
          cd ../../

      # Build the actual dvdnavtex binary
      - name: Build dvdnavtex binary
        run: |
          make build

          # Ensure the binary exists
          ls -la dvdnavtex || { echo "dvdnavtex binary not found!"; exit 1; }
      
      # Run dvdnavtex tests on the generated DVD structure
      - name: Run dvdnavtex tests
        run: |
          cd ./bbb_dvd_creator.sh/custom_dvd/VIDEO_TS
          # Assuming dvdnavtex testing command:
          dvdnavtex --test VTS_01_1.VOB

      # Cache the build output
      - name: üí≠ Cache application
        uses: actions/cache@v3
        id: dvdnavtex-build
        with:
          path: ./dvdnavtex
          key: ${{ github.sha }}

  apple-pkg:
    name: üë∑ Setup macOS .pkg
    runs-on: macos-latest
    needs: [build]
    timeout-minutes: 10

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      # Ensure Homebrew is installed
      - name: Install Homebrew and update
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || true
          brew update

      # Install required packages
      - name: Install xmlstarlet and python
        run: |
          brew install xmlstarlet python

      # Fetch application cache
      - name: ü§åüí≠ Fetch application cache
        uses: actions/cache@v3
        id: dvdnavtex-build
        with:
          path: ./dvdnavtex
          key: ${{ github.sha }}

      # Verify binary fetched from cache
      - name: Verify binary fetched from cache
        run: |
          if [ ! -f ./dvdnavtex ]; then
            echo "dvdnavtex binary not found after cache retrieval! Exiting..."
            exit 1
          else
            echo "dvdnavtex binary found after cache retrieval!"
          fi

      # Generate munki-pkg-workspace and build-info.plist
      - name: Generate munki-pkg-workspace and build-info.plist
        run: |
          echo "Creating munki-pkg-workspace directory..."
          mkdir -p munki-pkg-workspace/payload/usr/local/bin

          echo "Creating build-info.plist..."
          cat << EOF > munki-pkg-workspace/build-info.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN"
          "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>distribution_style</key>
              <false/>
              <key>identifier</key>
              <string>com.example.dvdnavtex</string>
              <key>install_location</key>
              <string>/</string>
              <key>name</key>
              <string>dvdnavtex-\${version}.pkg</string>
              <key>ownership</key>
              <string>recommended</string>
              <key>postinstall_action</key>
              <string>none</string>
              <key>suppress_bundle_relocation</key>
              <true/>
              <key>version</key>
              <string>1.0.0</string>
          </dict>
          </plist>
          EOF

      # Update version and name in build-info.plist from tag
      - name: ‚úçÔ∏è Update version and name in build-info.plist from tag
        run: |
          xmlstarlet ed --inplace \
            -u "/plist/dict/string[preceding-sibling::key[1]='version']" \
            -v "${GITHUB_REF_NAME}" \
            -u "/plist/dict/string[preceding-sibling::key[1]='name']" \
            -v "dvdnavtex-${GITHUB_REF_NAME}.pkg" \
            munki-pkg-workspace/build-info.plist

      # Copy binary to payload for packaging
      - name: ü´≥ Position application to payload
        run: |
          cp dvdnavtex munki-pkg-workspace/payload/usr/local/bin/

      # Run munkipkg for packaging
      - name: Run munkipkg üßô‚Äç‚ôÇÔ∏èüì¶
        uses: joncrain/munkipkg-action@v1.5
        with:
          pkg_subdir: "munki-pkg-workspace"

      # Cache the .pkg output
      - name: üí≠ Cache .pkg
        uses: actions/cache@v3
        id: macos-pkg
        with:
          path: |
            ./munki-pkg-workspace/build/*
          key: ${{ github.sha }}

  release:
    name: üì¶ Release
    needs: [apple-pkg]
    runs-on: macos-latest

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      # Fetch macOS .pkg cache
      - name: ü§åüí≠ Fetch macOS .pkg Cache
        uses: actions/cache@v3
        id: macos-pkg
        with:
          path: |
            ./munki-pkg-workspace/build/*
          key: ${{ github.sha }}

      # Release the static build and macOS package
      - name: üë∑üì¶ Release static builds & macOS pkg
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: |
            ./munki-pkg-workspace/build/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
